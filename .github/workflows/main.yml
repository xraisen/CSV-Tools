name: Build Cross-Platform CSV Tools

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  BUILD_DIR: 'dist'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        script: 
          - name: csvprocessor
            desc: "CSV Processor Tool"
          - name: csvsplitter
            desc: "CSV Splitter Tool"
        include:
          - os: windows-latest
            icon: icons/app.ico
            ext: exe
            args: --version-file version_info.txt --noconsole
          - os: macos-latest
            icon: icons/app.icns
            ext: ''
            args: --noconsole

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        echo "Building ${{ matrix.script.name }} for ${{ runner.os }}"
        
        # Windows specific build
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          pyinstaller --onefile \
                    --name ${{ matrix.script.name }}_windows \
                    --icon ${{ matrix.icon }} \
                    --version-file version_info.txt \
                    --noconsole \
                    ${{ matrix.script.name }}.py
          mv "dist/${{ matrix.script.name }}_windows.exe" .
        
        # macOS specific build
        else
          pyinstaller --onefile \
                    --name ${{ matrix.script.name }}_macos \
                    --icon ${{ matrix.icon }} \
                    --noconsole \
                    ${{ matrix.script.name }}.py
          mv "dist/${{ matrix.script.name }}_macos" .
          chmod +x "${{ matrix.script.name }}_macos"
        fi

    - name: Verify executable
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./${{ matrix.script.name }}_windows.exe --version || echo "Version check failed"
        else
          ./${{ matrix.script.name }}_macos --version || echo "Version check failed"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.script.name }}_${{ runner.os }}
        path: ${{ matrix.script.name }}_${{ runner.os }}*
        retention-days: 7

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.script.name }}_${{ runner.os }}*
        draft: false
        prerelease: false
        generate_release_notes: true

  quality:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: pip install flake8 black
    - run: flake8 --max-line-length=120 --ignore=E402,W503 *.py
    - run: black --check --diff *.py

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: pip install -r requirements.txt
    - run: python -m unittest discover -s tests
